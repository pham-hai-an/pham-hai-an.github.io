"use strict";(self.webpackChunkiframe_doc=self.webpackChunkiframe_doc||[]).push([[8887],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,_=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(_,o(o({ref:t},u),{},{components:n})):r.createElement(_,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4343:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={},l="Integrate with Carthage",s={unversionedId:"sdk/ios/integration/carthage",id:"sdk/ios/integration/carthage",title:"Integrate with Carthage",description:"_",source:"@site/docs/sdk/ios/integration/carthage.mdx",sourceDirName:"sdk/ios/integration",slug:"/sdk/ios/integration/carthage",permalink:"/sdk/ios/integration/carthage",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sdkSidebar",previous:{title:"Integrate with CocoaPods",permalink:"/sdk/ios/integration/cocoaPods"},next:{title:"Initialize SDK",permalink:"/sdk/ios/initialize"}},u={},p=[{value:"Step 1: Add frameworks",id:"step-1-add-frameworks",level:2},{value:"Step 2: Update <code>Cartfile</code>",id:"step-2-update-cartfile",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integrate-with-carthage"},"Integrate with Carthage"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LORA Short Video SDK")," is distributed via ",(0,i.kt)("inlineCode",{parentName:"p"},"xcframework")," which is recommended by Apple since WWDC 2019"),(0,i.kt)("h2",{id:"step-1-add-frameworks"},"Step 1: Add frameworks"),(0,i.kt)("p",null,"Drag ",(0,i.kt)("inlineCode",{parentName:"p"},"LoraCore.xcframework")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"LoraShortVideo.xcframework")," into ",(0,i.kt)("strong",{parentName:"p"},"Frameworks, Libraries, and Embedded Contents")," and Select ",(0,i.kt)("strong",{parentName:"p"},"Embedded & Sign"),"  "),(0,i.kt)("h2",{id:"step-2-update-cartfile"},"Step 2: Update ",(0,i.kt)("inlineCode",{parentName:"h2"},"Cartfile")),(0,i.kt)("p",null,"You may encounter the build error or get crash: ",(0,i.kt)("inlineCode",{parentName:"p"},"dyld: Symbol not found")," on Xcode 12 and above when using ",(0,i.kt)("inlineCode",{parentName:"p"},"xcframework")," . Here is a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md"},"workaround")," to fix this issue"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create file ",(0,i.kt)("inlineCode",{parentName:"li"},"carthage.sh")," in your root project folder with this content")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# carthage.sh\n# Usage example: ./carthage.sh build --platform iOS\n\nset -euo pipefail\n \nxcconfig=$(mktemp /tmp/static.xcconfig.XXXXXX)\ntrap 'rm -f \"$xcconfig\"' INT TERM HUP EXIT\n \n# For Xcode 12 make sure EXCLUDED_ARCHS is set to arm architectures otherwise\n# the build will fail on lipo due to duplicate architectures.\n \nCURRENT_XCODE_VERSION=\"$(xcodebuild -version | grep \"Xcode\" | cut -d' ' -f2 | cut -d'.' -f1)00\"\nCURRENT_XCODE_BUILD=$(xcodebuild -version | grep \"Build version\" | cut -d' ' -f3)\n\necho \"EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x\n86_64__XCODE_${CURRENT_XCODE_VERSION}__BUILD_${CURRENT_XCODE_BUILD} = \narm64 arm64e armv7 armv7s armv6 armv8\" >> $xcconfig\n \necho 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x\n86_64__XCODE_'${CURRENT_XCODE_VERSION}' = \n$(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_\nx86_64__XCODE_$(XCODE_VERSION_MAJOR)__BUILD_$(XCODE_PRODUCT_BUILD_VERSION))' \n>> $xcconfig\necho 'EXCLUDED_ARCHS = $(inherited) \n$(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__\nNATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT)__XCODE_$(XCODE_VERSION_MAJOR))' \n>> $xcconfig\n\n# build all libraries for distribution\n# https://github.com/Carthage/Carthage/issues/2845\necho 'BUILD_LIBRARY_FOR_DISTRIBUTION=YES' >> $xcconfig\n\nexport XCODE_XCCONFIG_FILE=\"$xcconfig\"\ncarthage \"$@\"\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add run permission to this file by ",(0,i.kt)("inlineCode",{parentName:"li"},"chmod +x carthage.sh")),(0,i.kt)("li",{parentName:"ul"},"Instead of running ",(0,i.kt)("inlineCode",{parentName:"li"},"carthage")," command, we'll change to run ",(0,i.kt)("inlineCode",{parentName:"li"},"carthage.sh"),". Eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"sh carthage.sh update --platform iOS --no-use-binaries --use-xcframeworks"))))}m.isMDXComponent=!0}}]);