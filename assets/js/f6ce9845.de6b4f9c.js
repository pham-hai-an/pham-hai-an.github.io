"use strict";(self.webpackChunkiframe_doc=self.webpackChunkiframe_doc||[]).push([[3977],{3905:function(e,t,l){l.d(t,{Zo:function(){return s},kt:function(){return m}});var i=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,i)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function r(e,t){if(null==e)return{};var l,i,n=function(e,t){if(null==e)return{};var l,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)l=o[i],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)l=o[i],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var u=i.createContext({}),d=function(e){var t=i.useContext(u),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},s=function(e){var t=d(e.components);return i.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var l=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=d(l),m=n,h=p["".concat(u,".").concat(m)]||p[m]||c[m]||o;return l?i.createElement(h,a(a({ref:t},s),{},{components:l})):i.createElement(h,a({ref:t},s))}));function m(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=l.length,a=new Array(o);a[0]=p;var r={};for(var u in t)hasOwnProperty.call(t,u)&&(r[u]=t[u]);r.originalType=e,r.mdxType="string"==typeof e?e:n,a[1]=r;for(var d=2;d<o;d++)a[d]=l[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,l)}p.displayName="MDXCreateElement"},9860:function(e,t,l){l.r(t),l.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return c}});var i=l(7462),n=l(3366),o=(l(7294),l(3905)),a=["components"],r={},u="LORA Short Video",d={unversionedId:"sdk/android",id:"sdk/android",title:"LORA Short Video",description:"LORA Short Video is an external LORA SDK module that can be used independently.",source:"@site/docs/sdk/android.md",sourceDirName:"sdk",slug:"/sdk/android",permalink:"/sdk/android",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Features",id:"features",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Project setup",id:"project-setup",level:3},{value:"Initialize the SDK",id:"initialize-the-sdk",level:3},{value:"ShortVideoView",id:"shortvideoview",level:2},{value:"Grid layout",id:"grid-layout",level:3},{value:"Grid Item",id:"grid-item",level:4},{value:"Carousel layout",id:"carousel-layout",level:3},{value:"Carousel Item",id:"carousel-item",level:4},{value:"Story Block layout",id:"story-block-layout",level:3},{value:"Story Block Item",id:"story-block-item",level:4},{value:"Detail player",id:"detail-player",level:3},{value:"Detail Item",id:"detail-item",level:4},{value:"Product list",id:"product-list",level:4},{value:"Q&amp;A item",id:"qa-item",level:4},{value:"Poll item",id:"poll-item",level:4},{value:"Picture in Picture (PiP)",id:"picture-in-picture-pip",level:4},{value:"Player behaviors",id:"player-behaviors",level:3},{value:"Auto play",id:"auto-play",level:4},{value:"Player complete action",id:"player-complete-action",level:4},{value:"Video source",id:"video-source",level:3},{value:"Playlist",id:"playlist",level:4},{value:"Single",id:"single",level:4},{value:"Play and pause",id:"play-and-pause",level:3},{value:"Listeners",id:"listeners",level:3},{value:"Error listener",id:"error-listener",level:4},{value:"Video item click listener",id:"video-item-click-listener",level:4},{value:"Detail player action listener",id:"detail-player-action-listener",level:4}],p={toc:c};function m(e){var t=e.components,l=(0,n.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lora-short-video"},"LORA Short Video"),(0,o.kt)("p",null,"LORA Short Video is an external LORA SDK module that can be used independently."),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Video Grid View"),(0,o.kt)("li",{parentName:"ul"},"Video Carousel View"),(0,o.kt)("li",{parentName:"ul"},"Video Story Block View"),(0,o.kt)("li",{parentName:"ul"},"Video Detail Player"),(0,o.kt)("li",{parentName:"ul"},"Playlist"),(0,o.kt)("li",{parentName:"ul"},"PiP")),(0,o.kt)("h2",{id:"getting-started"},"Getting started"),(0,o.kt)("h3",{id:"project-setup"},"Project setup"),(0,o.kt)("p",null,"The Short Video module requires a LORA core module, LORA common module, and other third-party libraries to function properly."),(0,o.kt)("p",null,"In your ",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle")," dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},"    // sdk aar files & required dependencies\n    implementation (name:'lora-core-release', ext:'aar')\n    implementation (name:'lora-common-release', ext:'aar')\n    implementation (name:'lora-shortvideo-release', ext:'aar')\n    implementation 'io.insert-koin:koin-android:3.4.0'\n    implementation 'androidx.media3:media3-exoplayer:1.0.2'\n    implementation 'androidx.media3:media3-ui:1.0.2'\n    implementation 'androidx.media3:media3-exoplayer-hls:1.0.2'\n    implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n    implementation \"com.squareup.retrofit2:converter-gson:2.9.0\"\n    implementation \"com.squareup.okhttp3:logging-interceptor:4.9.0\"\n    implementation 'com.github.bumptech.glide:glide:4.15.1'\n    kapt 'com.github.bumptech.glide:compiler:4.15.1'\n")),(0,o.kt)("h3",{id:"initialize-the-sdk"},"Initialize the SDK"),(0,o.kt)("p",null,"The LORA SDK requires a license key for initialization. Please contact us for information about this key."),(0,o.kt)("p",null,"Use the following code to initialize the SDK. You can place it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"onCreate")," of the main screen or in the application class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val loraSdkProvider = LoraSdkProvider(context)\nloraSdkProvider.init(LICENSE_KEY)\n")),(0,o.kt)("h2",{id:"shortvideoview"},"ShortVideoView"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ShortVideoView")," is a UI entry point designed to display a list of videos in various layout types such as grid, carousel, and story block.",(0,o.kt)("br",{parentName:"p"}),"\n","When a video item is clicked, it opens the main player and plays the selected video."),(0,o.kt)("p",null,"Adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"ShortVideoView")," is as simple as adding a normal Android View."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<sg.belive.lib.shortvideo.view.ShortVideoView\n    android:id="@+id/short_video_view"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"/>\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ShortVideoView")," loads video data from a Video Source defined by a View Config.\nThis View Config defines the layout type and provides customization for the UI, as well as controls for basic player behaviors."),(0,o.kt)("h3",{id:"grid-layout"},"Grid layout"),(0,o.kt)("p",null,"The grid layout displays videos vertically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\n// set the video source (SingleVideoSource, PlaylistVideoSource)\ncfBuilder.videoSource(source)\nval loCf = ShortVideoGridLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(loCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,o.kt)("p",null,"You can change the Grid span count (default value is 3):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val loCf = ShortVideoGridLayout.createDefaultConfig(this)\nloCf.numberOfColumns = 2\n")),(0,o.kt)("p",null,"Player behavior configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val playerCf = PlayerItemConfiguration().apply {\n    enableAutoPlay()\n    actionOnCompleted = PlayerCompleteAction.STOP\n}\ncfBuilder.playerConfig(playerCf)\n")),(0,o.kt)("p",null,"And other attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Item background color"),(0,o.kt)("li",{parentName:"ul"},"Spacing between items")),(0,o.kt)("h4",{id:"grid-item"},"Grid Item"),(0,o.kt)("p",null,"For Grid items, you can customize the following UI components/attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Item width and height ratio (recommended to use a portrait ratio)"),(0,o.kt)("li",{parentName:"ul"},"Video title text view"),(0,o.kt)("li",{parentName:"ul"},"Play button (set to null to hide)"),(0,o.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,o.kt)("li",{parentName:"ul"},"Video thumbnail scale mode")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val gridLoCf = ShortVideoGridLayout.createDefaultConfig(this)\ngridLoCf.ratio = "9:16"\ngridLoCf.itemConfiguration?.let { cf ->\n    cf.title = TitleConfiguration().apply {\n        this.color = ContextCompat.getColor(context, R.color.bls_sv_video_item_title_color)\n        this.backgroundRes = R.drawable.bls_sv_bg_carousel_video_item_title\n        this.textSize =\n            context.resources.getDimension(R.dimen.bls_sv_video_item_title_size)\n        this.font = Typeface.DEFAULT\n        this.gravity = Gravity.START or Gravity.CENTER_VERTICAL\n    }\n    cf.playButton = ButtonViewItemConfiguration().apply {\n        this.onStateIconRes = R.drawable.ic_play\n    }\n    cf.cornerRadius = 10F\n    cf.imageScaleMode = ImageView.ScaleType.CENTER\n}\n')),(0,o.kt)("h3",{id:"carousel-layout"},"Carousel layout"),(0,o.kt)("p",null,"The Carousel layout displays videos horizontally in a single row."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\ncfBuilder.videoSource(source)\nval carouselLoCf = ShortVideoCarouselLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(carouselLoCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,o.kt)("p",null,"Some attributes that can be customized include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Item background color"),(0,o.kt)("li",{parentName:"ul"},"Spacing between items")),(0,o.kt)("h4",{id:"carousel-item"},"Carousel Item"),(0,o.kt)("p",null,"For Carousel items, you can customize the following UI components/attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Video title text view (the layoutGravity attr is ignored)"),(0,o.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,o.kt)("li",{parentName:"ul"},"Progress bar"),(0,o.kt)("li",{parentName:"ul"},"Play/pause, mute button"),(0,o.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,o.kt)("li",{parentName:"ul"},"Video scale mode")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val loCf = ShortVideoCarouselLayout.createDefaultConfig(this)\nloCf.itemConfiguration?.let { cf ->\n    cf.videoScaleMode = BlsPlayerScaleMode.DEFAULT\n}\n")),(0,o.kt)("p",null,"Supported video scale modes:"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Scale mode"),(0,o.kt)("th",null,"Description"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"DEFAULT"),(0,o.kt)("td",null,"The SDK will choose the best scale mode bases on video/device orientation. This is the default value and it is recommended to use this mode.")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"FIT"),(0,o.kt)("td",null,"Make the video fit the view and keep the ratio in at least 1 dimension (width or height)")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"FILL"),(0,o.kt)("td",null,"Zoom the video and do not keep the ratio to fit the view in both width and height")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"FIXED_WIDTH"),(0,o.kt)("td",null,"Make the video fit the view width and keep the ratio")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"FIXED_HEIGHT"),(0,o.kt)("td",null,"Make the video fit the view height and keep the ratio")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"ZOOM"),(0,o.kt)("td",null,"Zoom the video and keep the ratio to fit the view in both width and height")))),(0,o.kt)("h3",{id:"story-block-layout"},"Story Block layout"),(0,o.kt)("p",null,"Similar to the Carousel layout, the Story Block layout displays videos horizontally, but only one video is visible at a time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\ncfBuilder.videoSource(source)\nval storyBlockLoCf = ShortVideoStoryBlockLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(storyBlockLoCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,o.kt)("p",null,"You have the ability to disable scrolling and customize the next/previous\nbuttons. Below are the attributes available for customization:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enable/Disable scrolling"),(0,o.kt)("li",{parentName:"ul"},"Container background color"),(0,o.kt)("li",{parentName:"ul"},"Item background color"),(0,o.kt)("li",{parentName:"ul"},"Previous button (set to null to hide)"),(0,o.kt)("li",{parentName:"ul"},"Next button (set to null to hide)")),(0,o.kt)("h4",{id:"story-block-item"},"Story Block Item"),(0,o.kt)("p",null,"For Story Block items, you can customize the following UI components/attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Video title text view (the layoutGravity attr is ignored)"),(0,o.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,o.kt)("li",{parentName:"ul"},"Progress bar"),(0,o.kt)("li",{parentName:"ul"},"Play/pause, mute, full screen, share button"),(0,o.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,o.kt)("li",{parentName:"ul"},"Video scale mode")),(0,o.kt)("h3",{id:"detail-player"},"Detail player"),(0,o.kt)("p",null,"The Short Video module provides a detail player as an internal screen (activity) that opens when clicking on a video item.\nThis screen includes a video player with various functions and an overlay data detail.\nYou can navigate between items by swipe up and down gestures or using navigation buttons.\nThe UI and player behavior can be configured when setting up the Grid, Carousel, or Story Block layout."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val gridCfBuilder = ViewConfig.Builder(this)\n// Create the detail view config\nval detailCfBuilder = DetailViewConfig.Builder(this)\ndetailCfBuilder.layoutConfig(ShortVideoDetailLayout.createDefaultConfig(this))\ndetailCfBuilder.playerConfig(PlayerItemConfiguration())\n// Set the detail view config\ngridCfBuilder.detailViewConfig(detailCfBuilder.build())\nshortVideoView.init(gridCfBuilder.build())\n")),(0,o.kt)("p",null,"The following attributes can be adjusted:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enable/Disable scrolling"),(0,o.kt)("li",{parentName:"ul"},"Item background color"),(0,o.kt)("li",{parentName:"ul"},"Previous button (set to null to hide)"),(0,o.kt)("li",{parentName:"ul"},"Next button (set to null to hide)")),(0,o.kt)("h4",{id:"detail-item"},"Detail Item"),(0,o.kt)("p",null,"For detail items, you can customize the following UI components/attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Video title, duration text view (the layoutGravity attr is ignored)"),(0,o.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,o.kt)("li",{parentName:"ul"},"Seek bar"),(0,o.kt)("li",{parentName:"ul"},"Play/pause, mute, pip, share, close button"),(0,o.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,o.kt)("li",{parentName:"ul"},"Video scale mode"),(0,o.kt)("li",{parentName:"ul"},"Product item view.")),(0,o.kt)("h4",{id:"product-list"},"Product list"),(0,o.kt)("p",null,"A list of products can be attached to a video item, displayed in the main player.\nEach product item might contain a Shop CTA button that opens the product URL in an external browser (this behavior can be overridden).\nThe product item UI can also be customized."),(0,o.kt)("p",null,"For product item layout, you can customize the below UI components/attrs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Product title text view (the layoutGravity attr is ignored)"),(0,o.kt)("li",{parentName:"ul"},"Item's corner radius/background"),(0,o.kt)("li",{parentName:"ul"},"Shop CTA text color and icon resource."),(0,o.kt)("li",{parentName:"ul"},"Shop CTA text content. If set, it will override the remote value."),(0,o.kt)("li",{parentName:"ul"},"Product thumbnail scale mode")),(0,o.kt)("h4",{id:"qa-item"},"Q&A item"),(0,o.kt)("p",null,"A Q&A can be attached to a video item and displayed in the detail.\nEach Q&A item contains a Call to Action (CTA) button that submits an answer.\nThe Q&A item UI can also be customized:"),(0,o.kt)("p",null,"For Q&A item layout, you can customize the below UI components/attrs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CTA button: Text Color, Background Color. Other UI components color will be generated from this CTA button colors")),(0,o.kt)("h4",{id:"poll-item"},"Poll item"),(0,o.kt)("p",null,"A Poll can be attached to a video item and displayed in the detail.\nEach Poll item contains a Call to Action (CTA) button that submits an option.\nThe Poll item UI can also be customized:"),(0,o.kt)("p",null,"For Poll item layout, you can customize the below UI components/attrs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CTA button: Text Color, Background Color. Other UI components color will be generated from this CTA button colors")),(0,o.kt)("h4",{id:"picture-in-picture-pip"},"Picture in Picture (PiP)"),(0,o.kt)("p",null,"The detail player supports playing a video in Picture in Picture (PiP) mode on devices that support PiP (Android 8+).\nYou can disable this feature by hiding the PiP button."),(0,o.kt)("h3",{id:"player-behaviors"},"Player behaviors"),(0,o.kt)("h4",{id:"auto-play"},"Auto play"),(0,o.kt)("p",null,"For Carousel and Story Block, this flag causes a video to play when it becomes visible on the screen.\nFor the Grid layout, this flag is ignored.\nThe default value is true."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val playerCf = PlayerItemConfiguration().apply {\n    enableAutoPlay()\n    // \n    disableAutoPlay()\n}\n")),(0,o.kt)("h4",{id:"player-complete-action"},"Player complete action"),(0,o.kt)("p",null,"You can control the behavior when the player finishes playback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val playerCf = PlayerItemConfiguration().apply {\n    actionOnCompleted = PlayerCompleteAction.STOP\n}\n")),(0,o.kt)("p",null,"Supported Actions:"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Action"),(0,o.kt)("th",null,"Description"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"STOP"),(0,o.kt)("td",null,"The player will always stop the video after playing it.")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"REPEAT"),(0,o.kt)("td",null,"The player will always loop the current video.")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PLAY_NEXT_ITEM"),(0,o.kt)("td",null,"The player will always play the next video in the list after playing the current video. If the current video is the last item, the player will stop playing. This is the default value.")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PLAY_NEXT_ITEM_AND_LOOP"),(0,o.kt)("td",null,"The player will always play the next video in the list after playing the current video. If the current video is the last item, the player will play the first item in the list. This behavior is same as the Loop from start setting at the CMS.")))),(0,o.kt)("h3",{id:"video-source"},"Video source"),(0,o.kt)("h4",{id:"playlist"},"Playlist"),(0,o.kt)("p",null,"The playlist video source fetches all available videos from a specific playlist by its ID.\nTo create a playlist source, use the following API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"ShortVideoSource.playlist(playlistAlias, maxVideoItemsCount)\n")),(0,o.kt)("p",null,"Setting a ",(0,o.kt)("inlineCode",{parentName:"p"},"maxVideoItemsCount")," greater than 0 will limit the number of videos to load."),(0,o.kt)("h4",{id:"single"},"Single"),(0,o.kt)("p",null,"The single video source fetches a single video by its video ID.\nTo create a single source, use the following API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"ShortVideoSource.singleVideo(videoId)\n")),(0,o.kt)("h3",{id:"play-and-pause"},"Play and pause"),(0,o.kt)("p",null,"You can pause and resume the video by calling the following APIs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"shortVideoView.pause()\n//\nshortVideoView.play()\n")),(0,o.kt)("h3",{id:"listeners"},"Listeners"),(0,o.kt)("h4",{id:"error-listener"},"Error listener"),(0,o.kt)("p",null,"When an error occurs, the Short Video module triggers an error callback with a code and a message.\nTo listen to errors, set a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlsShortVideoErrorListener")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ShortVideoView"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"shortVideoView.setErrorListener(object : BlsShortVideoErrorListener {\n    override fun onShortVideoError(code: Int, msg: String?) {\n    }\n})\n")),(0,o.kt)("p",null,"The error code can be found in the ",(0,o.kt)("inlineCode",{parentName:"p"},"BlsShortVideoErrorCode"),"."),(0,o.kt)("h4",{id:"video-item-click-listener"},"Video item click listener"),(0,o.kt)("p",null,"When a user clicks on a video item, it opens the main player and triggers a callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"shortVideoView.setVideoItemClickedListener(object : BlsShortVideoItemClickListener {\n    override fun onShortVideoItemClicked(videoId: String) {\n    }\n\n})\n")),(0,o.kt)("p",null,"The implementation of the listener mainly serves analytics purposes and does not affect the flow."),(0,o.kt)("h4",{id:"detail-player-action-listener"},"Detail player action listener"),(0,o.kt)("p",null,"This listener is different from other listeners as it's bound to a singleton handler.\nTo avoid memory leaks, avoid implementing this interface as an anonymous class in the activity context. Instead, create a class and implement the interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MainPlayerAction : BlsShortVideoMainPlayerActionListener {\n    override fun onProductItemClicked(\n        context: Context, item: ShortVideoProductModel\n    ): Boolean {\n        context.openBrowser(item.productUrl.orEmpty())\n        return true\n    }\n\n    override fun onShareVideo(context: Context, videoId: String): Boolean {\n        context.shareText(videoId)\n        return true\n    }\n    \n    override fun onSubmitPollError(context: Context, errorCode: Int) {\n    }\n\n    override fun onSubmitDefaultAnswerError(context: Context, errorCode: Int) {\n    }\n\n    override fun onSubmitFollowupAnswerError(context: Context, errorCode: Int) {\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onProductItemClicked")," method is triggered when a shop CTA button is clicked. Returning ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in this method consumes the event and stops the flow.\nIf ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," is returned, the SDK continues to handle the event."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onShareVideo")," method is triggered when a share button is clicked (in both Carousel and Main player). Returning ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," consumes the event and stops the flow.\nIf ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," is returned, the SDK continues to handle the event, and the default behavior is to open the system share dialog."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmitPollError")," method is triggered when submitting a poll option fails."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmitDefaultAnswerError")," method is triggered when submitting a default answer fails."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmitFollowupAnswerError")," method is triggered when submitting a follow-up answer fails."))}m.isMDXComponent=!0}}]);