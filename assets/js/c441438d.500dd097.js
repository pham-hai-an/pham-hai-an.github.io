"use strict";(self.webpackChunkiframe_doc=self.webpackChunkiframe_doc||[]).push([[5133],{3905:function(e,t,i){i.d(t,{Zo:function(){return s},kt:function(){return m}});var n=i(7294);function l(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){l(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,l=function(e,t){if(null==e)return{};var i,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(l[i]=e[i]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(l[i]=e[i])}return l}var d=n.createContext({}),u=function(e){var t=n.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},s=function(e){var t=u(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,l=e.mdxType,a=e.originalType,d=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),c=u(i),m=l,h=c["".concat(d,".").concat(m)]||c[m]||p[m]||a;return i?n.createElement(h,o(o({ref:t},s),{},{components:i})):n.createElement(h,o({ref:t},s))}));function m(e,t){var i=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=i.length,o=new Array(a);o[0]=c;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var u=2;u<a;u++)o[u]=i[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},119:function(e,t,i){i.r(t),i.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return p}});var n=i(7462),l=i(3366),a=(i(7294),i(3905)),o=["components"],r={displayed_sidebar:"sdkSidebar"},d="Android Integration",u={unversionedId:"sdk/android",id:"sdk/android",title:"Android Integration",description:"Lora Short Video is an external Lora SDK module and it can be used independently.",source:"@site/docs/sdk/android.mdx",sourceDirName:"sdk",slug:"/sdk/android",permalink:"/sdk/android",draft:!1,tags:[],version:"current",frontMatter:{displayed_sidebar:"sdkSidebar"},sidebar:"sdkSidebar"},s={},p=[{value:"Getting started",id:"getting-started",level:2},{value:"Project setup",id:"project-setup",level:3},{value:"Initialize the SDK",id:"initialize-the-sdk",level:3},{value:"ShortVideoView",id:"shortvideoview",level:2},{value:"Grid layout",id:"grid-layout",level:2},{value:"Grid Item",id:"grid-item",level:3},{value:"Carousel layout",id:"carousel-layout",level:2},{value:"Carousel Item",id:"carousel-item",level:3},{value:"Story Block layout",id:"story-block-layout",level:3},{value:"Story Block Item",id:"story-block-item",level:4},{value:"Detail player",id:"detail-player",level:3},{value:"Detail Item",id:"detail-item",level:4},{value:"Product list",id:"product-list",level:4},{value:"Q&amp;A item",id:"qa-item",level:4},{value:"Poll item",id:"poll-item",level:4},{value:"Picture in Picture (PiP)",id:"picture-in-picture-pip",level:4},{value:"Player behaviors",id:"player-behaviors",level:3},{value:"Auto play",id:"auto-play",level:4},{value:"Player complete action",id:"player-complete-action",level:4},{value:"Video source",id:"video-source",level:3},{value:"Playlist",id:"playlist",level:4},{value:"SingleSingle",id:"singlesingle",level:4},{value:"Play and pause",id:"play-and-pause",level:3},{value:"Listeners",id:"listeners",level:3},{value:"Error listener",id:"error-listener",level:4},{value:"Video item click listener",id:"video-item-click-listener",level:4},{value:"Detail player action listener",id:"detail-player-action-listener",level:4}],c={toc:p};function m(e){var t=e.components,i=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"android-integration"},"Android Integration"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Lora Short Video is an external Lora SDK module and it can be used independently."),(0,a.kt)("h2",{id:"getting-started"},"Getting started"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"project-setup"},"Project setup"),(0,a.kt)("p",null,"The Short Video requires a Lora core module, Lora common module and other 3rd libraries to work normally."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")," dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// sdk aar files & required dependencies\nimplementation (name:'lora-core-release', ext:'aar')\nimplementation (name:'lora-common-release', ext:'aar')\nimplementation (name:'lora-shortvideo-release', ext:'aar')\nimplementation 'io.insert-koin:koin-android:3.4.0'\nimplementation 'androidx.media3:media3-exoplayer:1.0.2'\nimplementation 'androidx.media3:media3-ui:1.0.2'\nimplementation 'androidx.media3:media3-exoplayer-hls:1.0.2'\nimplementation \"com.squareup.retrofit2:retrofit:2.9.0\"\nimplementation \"com.squareup.retrofit2:converter-gson:2.9.0\"\nimplementation \"com.squareup.okhttp3:logging-interceptor:4.9.0\"\nimplementation 'com.github.bumptech.glide:glide:4.15.1'\nkapt 'com.github.bumptech.glide:compiler:4.15.1'\n")),(0,a.kt)("h3",{id:"initialize-the-sdk"},"Initialize the SDK"),(0,a.kt)("p",null,"Lora SDK requires a license key for initialization. Please contact us for information about this key."),(0,a.kt)("p",null,"Using the below code to initialize the SDK. You can place it in the main screen's ",(0,a.kt)("inlineCode",{parentName:"p"},"onCreate")," or in the application class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val loraSdkProvider = LoraSdkProvider(context)\nloraSdkProvider.init(LICENSE_KEY)\n")),(0,a.kt)("h2",{id:"shortvideoview"},"ShortVideoView"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"ShortVideoView is a UI entry point and designed to display a list of videos in many layout types: grid, carousel and story block. When a video item is clicked, it opens\nthe main player and play the selected video."),(0,a.kt)("p",null,"Adding a ShortVideoView is as simple as a normal Android View."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<sg.belive.lib.shortvideo.view.ShortVideoView\n    android:id="@+id/short_video_view"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"/>\n')),(0,a.kt)("p",null,"ShortVideoView loads the video data from a Video Source which is defined by a View Config. This View Config defines the layout type and provides some\ncustomization for the UI. It also controls some basic player behaviors."),(0,a.kt)("h2",{id:"grid-layout"},"Grid layout"),(0,a.kt)("p",null,"Grid layout displays the videos vertically."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\n// set the video source (SingleVideoSource, PlaylistVideoSource)\ncfBuilder.videoSource(source)\nval loCf = ShortVideoGridLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(loCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,a.kt)("p",null,"You can change the Grid span count (the default value is 3)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val loCf = ShortVideoGridLayout.createDefaultConfig(this)\nloCf.numberOfColumns = 2\n")),(0,a.kt)("p",null,"The player behavior config is set as below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val playerCf = PlayerItemConfiguration().apply {\n    enableAutoPlay()\n    actionOnCompleted = PlayerCompleteAction.STOP\n}\ncfBuilder.playerConfig(playerCf)\n")),(0,a.kt)("h3",{id:"grid-item"},"Grid Item"),(0,a.kt)("p",null,"For Grid item, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Item width and height ratio: This ratio is in String format ("9:16"). It is recommended to use a portrait ratio'),(0,a.kt)("li",{parentName:"ul"},"Video title text view"),(0,a.kt)("li",{parentName:"ul"},"Play button. If you want to hide it, simply set it to null"),(0,a.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,a.kt)("li",{parentName:"ul"},"Video thumbnail scale mode")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'val gridLoCf = ShortVideoGridLayout.createDefaultConfig(this)\ngridLoCf.ratio = "9:16"\ngridLoCf.itemConfiguration?.let { cf ->\n    cf.title = TitleConfiguration().apply {\n        this.color = ContextCompat.getColor(context, R.color.bls_sv_video_item_title_color)\n        this.backgroundRes = R.drawable.bls_sv_bg_carousel_video_item_title\n        this.textSize =\n            context.resources.getDimension(R.dimen.bls_sv_video_item_title_size)\n        this.font = Typeface.DEFAULT\n        this.gravity = Gravity.START or Gravity.CENTER_VERTICAL\n    }\n    cf.playButton = ButtonViewItemConfiguration().apply {\n        this.onStateIconRes = R.drawable.ic_play\n    }\n    cf.cornerRadius = 10F\n    cf.imageScaleMode = ImageView.ScaleType.CENTER\n}\n')),(0,a.kt)("h2",{id:"carousel-layout"},"Carousel layout"),(0,a.kt)("p",null,"Carousel layout brings a video preview feature to the ShortVideoView. It display the videos horizontally in single row"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\ncfBuilder.videoSource(source)\nval carouselLoCf = ShortVideoCarouselLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(carouselLoCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,a.kt)("h3",{id:"carousel-item"},"Carousel Item"),(0,a.kt)("p",null,"For Carousel item, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Video title text view (the layoutGravity attr is ignored)"),(0,a.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,a.kt)("li",{parentName:"ul"},"Progress bar"),(0,a.kt)("li",{parentName:"ul"},"Play/pause, mute button"),(0,a.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,a.kt)("li",{parentName:"ul"},"Video scale mode")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val loCf = ShortVideoCarouselLayout.createDefaultConfig(this)\nloCf.itemConfiguration?.let { cf ->\n    cf.videoScaleMode = BlsPlayerScaleMode.DEFAULT\n}\n")),(0,a.kt)("p",null,"Supported video scale mode:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Scale mode"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DEFAULT"),(0,a.kt)("td",{parentName:"tr",align:null},"The SDK will choose the best scale mode bases on video/device orientation. This is the default value and it is recommended to use this mode.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FIT"),(0,a.kt)("td",{parentName:"tr",align:null},"Make the video fit the view and keep the ratio in at least 1 dimension (width or height)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FILL"),(0,a.kt)("td",{parentName:"tr",align:null},"Zoom the video and do not keep the ratio to fit the view in both width and height")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FIXED_WIDTH"),(0,a.kt)("td",{parentName:"tr",align:null},"Make the video fit the view width and keep the ratio")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FIXED_HEIGHT"),(0,a.kt)("td",{parentName:"tr",align:null},"Make the video fit the view height and keep the ratio")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ZOOM"),(0,a.kt)("td",{parentName:"tr",align:null},"Zoom the video and keep the ratio to fit the view in both width and height")))),(0,a.kt)("h3",{id:"story-block-layout"},"Story Block layout"),(0,a.kt)("p",null,"Similar to the Carousel layout, the Story block displays the videos horizontally but only one video can be visible at a time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val cfBuilder = ViewConfig.Builder(this) // `this` is a context\ncfBuilder.videoSource(source)\nval storyBlockLoCf = ShortVideoStoryBlockLayout.createDefaultConfig(this)\ncfBuilder.layoutConfig(storyBlockLoCf)\nshortVideoView.init(cfBuilder.build())\n")),(0,a.kt)("h4",{id:"story-block-item"},"Story Block Item"),(0,a.kt)("p",null,"For Story Block item, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Video title text view (the layoutGravity attr is ignored)"),(0,a.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,a.kt)("li",{parentName:"ul"},"Progress bar"),(0,a.kt)("li",{parentName:"ul"},"Play/pause, mute, full screen, share button"),(0,a.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,a.kt)("li",{parentName:"ul"},"Video scale mode")),(0,a.kt)("h3",{id:"detail-player"},"Detail player"),(0,a.kt)("p",null,"The ShortVideo module provides a detail player as an internal screen (activity) that can be opened when clicking on a video item. This screen includes a video player\nwith many functions and a overlay data detail The UI and player behavior can be configured when setting up the Grid/Carousel/Story Block layout."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val gridCfBuilder = ViewConfig.Builder(this)\n// Create the detail view config\nval detailCfBuilder = DetailViewConfig.Builder(this)\ndetailCfBuilder.layoutConfig(ShortVideoDetailLayout.createDefaultConfig(this))\ndetailCfBuilder.playerConfig(PlayerItemConfiguration())\n// Set the detail view config\ngridCfBuilder.detailViewConfig(detailCfBuilder.build())\nshortVideoView.init(gridCfBuilder.build())\n")),(0,a.kt)("h4",{id:"detail-item"},"Detail Item"),(0,a.kt)("p",null,"For detail item, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Video title, duration text view (the layoutGravity attr is ignored)"),(0,a.kt)("li",{parentName:"ul"},"Item's corner radius"),(0,a.kt)("li",{parentName:"ul"},"Seek bar"),(0,a.kt)("li",{parentName:"ul"},"Play/pause, mute, pip, share, close button"),(0,a.kt)("li",{parentName:"ul"},"Video thumbnail scale mode"),(0,a.kt)("li",{parentName:"ul"},"Video scale mode"),(0,a.kt)("li",{parentName:"ul"},"Product item view.")),(0,a.kt)("h4",{id:"product-list"},"Product list"),(0,a.kt)("p",null,"A list of products can be attached to a video item and it will be displayed in the main player. Each product item might contain a Shop CTA button which opens the\nproduct URL in an external browser (you can override this behavior). The product item UI can also be customized."),(0,a.kt)("p",null,"For product item layout, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Product title text view (the layoutGravity attr is ignored)"),(0,a.kt)("li",{parentName:"ul"},"Item's corner radius/background"),(0,a.kt)("li",{parentName:"ul"},"Shop CTA text color and icon resource."),(0,a.kt)("li",{parentName:"ul"},"Shop CTA text content. If set, it will override the remote value."),(0,a.kt)("li",{parentName:"ul"},"Product thumbnail scale mode")),(0,a.kt)("h4",{id:"qa-item"},"Q&A item"),(0,a.kt)("p",null,"A Q&A can be attached to a video item and it will be displayed in the detail. Each Q&A item contains a CTA (Call to action) button which submits an answer. The Q&A\nitem UI can also be customized:"),(0,a.kt)("p",null,"For Q&A item layout, you can customize the below UI components/attrs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CTA button: Text Color, Background Color. Other UI components color will be generated from this CTA button colors")),(0,a.kt)("h4",{id:"poll-item"},"Poll item"),(0,a.kt)("p",null,"A Poll can be attached to a video item and it will be displayed in the detail. Each Poll item contains a CTA (Call to action) button which submits an option. The Poll\nitem UI can also be customized:"),(0,a.kt)("p",null,"For Poll item layout, you can customize the below UI components/attrs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CTA button: Text Color, Background Color. Other UI components color will be generated from this CTA button colors\n")),(0,a.kt)("h4",{id:"picture-in-picture-pip"},"Picture in Picture (PiP)"),(0,a.kt)("p",null,"The details player supports play a video in PiP mode on devices that support Pip (Android 8+). You can disable this feature by hiding the PiP button."),(0,a.kt)("h3",{id:"player-behaviors"},"Player behaviors"),(0,a.kt)("h4",{id:"auto-play"},"Auto play"),(0,a.kt)("p",null,"For Carousel and Story Block, this flag will caused a video to play when it is visible on the screen. For Grid layout, this flag is ignored. The default value is true."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val playerCf = PlayerItemConfiguration().apply {\n    enableAutoPlay()\n    //\n    disableAutoPlay()\n}\n")),(0,a.kt)("h4",{id:"player-complete-action"},"Player complete action"),(0,a.kt)("p",null,"You can control the behavior when the player finishes a playback."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val playerCf = PlayerItemConfiguration().apply {\n    actionOnCompleted = PlayerCompleteAction.STOP\n}\n")),(0,a.kt)("p",null,"Supported Actions:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Action"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"STOP"),(0,a.kt)("td",{parentName:"tr",align:null},"The player will always stop the video after playing it.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"REPEAT"),(0,a.kt)("td",{parentName:"tr",align:null},"The player will always loop the current video.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PLAY_NEXT_ITEM"),(0,a.kt)("td",{parentName:"tr",align:null},"The player will always play the next video in the list after playing the current video. If the current video is the last item, the player will stop playing. This is the default value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PLAY_NEXT_ITEM_AND_LOOP"),(0,a.kt)("td",{parentName:"tr",align:null},"The player will always play the next video in the list after playing the current video. If the current video is the last item, the player will play the first item in the list. This behavior is same as the Loop from start setting at the CMS.")))),(0,a.kt)("h3",{id:"video-source"},"Video source"),(0,a.kt)("h4",{id:"playlist"},"Playlist"),(0,a.kt)("p",null,"The playlist video source will fetch all the available videos from a specific playlist by an ID. To create a playlist source, use the below API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ShortVideoSource.playlist(playlistAlias, maxVideoItemsCount)\n")),(0,a.kt)("p",null,"Setting a maxVideoItemsCount greater than 0 will limit the number of videos to load."),(0,a.kt)("h4",{id:"singlesingle"},"SingleSingle"),(0,a.kt)("p",null,"The single video source will fetch a single video by a video id. To create a single source, use the below API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ShortVideoSource.singleVideo(videoId)\n")),(0,a.kt)("h3",{id:"play-and-pause"},"Play and pause"),(0,a.kt)("p",null,"User can pause and resume the video by calling the following APIs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"shortVideoView.pause()\n//\nshortVideoView.play()\n")),(0,a.kt)("h3",{id:"listeners"},"Listeners"),(0,a.kt)("h4",{id:"error-listener"},"Error listener"),(0,a.kt)("p",null,"When an error happens, the ShortVideo module triggers an error callback with a code and a message. To listen to the error, set a BlsShortVideoErrorListener to\nthe ShortVideoView"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"shortVideoView.setErrorListener(object : BlsShortVideoErrorListener {\n    override fun onShortVideoError(code: Int, msg: String?) {\n    }\n})\n")),(0,a.kt)("p",null,"The error code can be found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"BlsShortVideoErrorCode")," and the message will describe the error"),(0,a.kt)("h4",{id:"video-item-click-listener"},"Video item click listener"),(0,a.kt)("p",null,"When user clicks on a video item, it will open the main player and trigger a callback."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"shortVideoView.setVideoItemClickedListener(object : BlsShortVideoItemClickListener {\n    override fun onShortVideoItemClicked(videoId: String) {\n    }\n\n})\n")),(0,a.kt)("p",null,"The implementation of the listener will not affect the flow, it is used mainly for analytics purpose."),(0,a.kt)("h4",{id:"detail-player-action-listener"},"Detail player action listener"),(0,a.kt)("p",null,"This listener is different to other listeners that it is bound to an singleton handler. You have to take care of the usage of this listener or a memory leak can occur. You\nshould not implement this interface as an anonymous class in the activity context. A recommended approach is to create a class and implement this interface to\navoid any strong reference to the activity or fragment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class MainPlayerAction : BlsShortVideoMainPlayerActionListener {\n    override fun onProductItemClicked(\n        context: Context, item: ShortVideoProductModel\n    ): Boolean {\n        context.openBrowser(item.productUrl.orEmpty())\n        return true\n    }\n\n    override fun onShareVideo(context: Context, videoId: String): Boolean {\n        context.shareText(videoId)\n        return true\n    }\n\n    override fun onSubmitPollError(context: Context, errorCode: Int) {\n    }\n\n    override fun onSubmitDefaultAnswerError(context: Context, errorCode: Int) {\n    }\n    \n    override fun onSubmitFollowupAnswerError(context: Context, errorCode: Int) {\n    }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onProductItemClicked")," is triggered when a shop CTA button is clicked. You can return true in this API to consume the event and stop the flow. If you return\nfalse, the SDK will continue handling the event (if any)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onShareVideo")," is triggered when a share button is clicked (in both Carousel and Main player). You can return true in this API to consume the event and stop the\nflow. If you return false, the SDK will continue handling the event. The default handler is to open the system share dialog."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onSubmitPollError")," is triggered when submitting a poll option is failed."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onSubmitDefaultAnswerError")," is triggered when submitting a default answer is failed."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onSubmitFollowupAnswerError")," is triggered when submitting a follow up answer is failed."))}m.isMDXComponent=!0}}]);